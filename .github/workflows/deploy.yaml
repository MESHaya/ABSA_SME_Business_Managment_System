name: Complete CI/CD Pipeline - TestAbsa SME System

on:
  push:
    branches:
      - New-Working-App
      - main
  pull_request:
    branches:
      - New-Working-App
      - main

env:
  BUILD_CONFIGURATION: 'Release'
  SOLUTION_FILE_PATH: 'TestAbsa.sln'
  # Leave empty to publish entire solution, or specify exact path
  PROJECT_NAME: ''
  DOTNET_VERSION: '8.0.x'

jobs:
  # ============================================================
  # JOB 1: BUILD AND TEST
  # ============================================================
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    steps:
    - name: 1. Checkout Repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for better analysis

    - name: 2. Setup .NET Core SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: 3. Restore Dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE_PATH }}

    - name: 4. Build Application
      run: dotnet build ${{ env.SOLUTION_FILE_PATH }} --configuration ${{ env.BUILD_CONFIGURATION }} --no-restore

    # ============================================================
    # REQUIREMENT 3: UNIT TEST REPORTING
    # ============================================================
    - name: 5. Run Unit Tests with Coverage
      run: |
        dotnet test ${{ env.SOLUTION_FILE_PATH }} \
          --configuration ${{ env.BUILD_CONFIGURATION }} \
          --no-build \
          --verbosity normal \
          --logger "trx;LogFileName=test-results.trx" \
          --logger "html;LogFileName=test-results.html" \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults
      continue-on-error: true

    - name: 6. Upload Test Results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          **/TestResults/**/*.trx
          **/TestResults/**/*.html
          **/TestResults/**/coverage.cobertura.xml
        if-no-files-found: warn

    # ============================================================
    # JOB OUTPUT: Publish Application
    # ============================================================
   

  # ============================================================
  # JOB 2: STATIC CODE ANALYSIS
  # ============================================================
  static-code-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: 1. Checkout Repository
      uses: actions/checkout@v4

    - name: 2. Setup .NET Core SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # ============================================================
    # REQUIREMENT 4: STATIC CODE ANALYSIS
    # ============================================================
    - name: 3. Install dotnet-format (Code Style Analyzer)
      run: dotnet tool install -g dotnet-format

    - name: 4. Run Code Style Analysis
      run: |
        dotnet format ${{ env.SOLUTION_FILE_PATH }} --verify-no-changes --verbosity diagnostic --report ./code-analysis-report
      continue-on-error: true

    - name: 5. Run .NET Code Analyzers
      run: |
        dotnet build ${{ env.SOLUTION_FILE_PATH }} \
          --configuration ${{ env.BUILD_CONFIGURATION }} \
          /p:TreatWarningsAsErrors=false \
          /p:RunAnalyzersDuringBuild=true \
          /p:AnalysisLevel=latest-all \
          > code-analysis-output.txt 2>&1
      continue-on-error: true

    - name: 6. Upload Static Analysis Report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: static-analysis-report
        path: |
          code-analysis-report/
          code-analysis-output.txt
        if-no-files-found: warn

  # ============================================================
  # JOB 3: SECURITY SCANNING
  # ============================================================
  security-scan:
    name: Security Vulnerability Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 1. Checkout Repository
      uses: actions/checkout@v4

    - name: 2. Setup .NET Core SDK
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    # ============================================================
    # REQUIREMENT 5: SECURITY TESTING
    # ============================================================
    - name: 3. Restore Dependencies
      run: dotnet restore ${{ env.SOLUTION_FILE_PATH }}

    - name: 4. Check for Vulnerable Dependencies
      run: |
        dotnet list package --vulnerable --include-transitive 2>&1 | tee security-vulnerabilities.txt
      continue-on-error: true

    - name: 5. Run Dependency Security Audit
      run: |
        dotnet list ${{ env.SOLUTION_FILE_PATH }} package --vulnerable --include-transitive --format json > security-report.json
      continue-on-error: true

    - name: 6. DevSkim Security Analyzer
      uses: microsoft/DevSkim-Action@v1
      continue-on-error: true

    - name: 7. Upload DevSkim Results to GitHub Security
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: devskim-results.sarif
      continue-on-error: true

    - name: 8. Upload Security Reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: security-scan-reports
        path: |
          security-vulnerabilities.txt
          security-report.json
          devskim-results.sarif
        if-no-files-found: warn

  # ============================================================
  # JOB 4: SUMMARY REPORT
  # ============================================================
  pipeline-summary:
    name: Pipeline Summary
    runs-on: ubuntu-latest
    needs: [build-and-test, static-code-analysis, security-scan]
    if: always()
    
    steps:
    - name: Pipeline Completion Summary
      run: |
        echo "=========================================="
        echo "CI/CD Pipeline Execution Complete"
        echo "=========================================="
        echo "✅ Build and Test: ${{ needs.build-and-test.result }}"
        echo "✅ Static Code Analysis: ${{ needs.static-code-analysis.result }}"
        echo "✅ Security Scan: ${{ needs.security-scan.result }}"
        echo "=========================================="
        echo "All artifacts uploaded to GitHub Actions"
        echo "=========================================="
