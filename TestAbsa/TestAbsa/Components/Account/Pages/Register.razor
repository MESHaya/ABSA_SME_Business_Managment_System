@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@using TestAbsa.Data
@using TestAbsa.Data.Models

@inject TestAbsa.Data.ApplicationDbContext Context
@inject UserManager<ApplicationUser> UserManager
@inject RoleManager<IdentityRole> RoleManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-md-4">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.FullName" class="form-control" autocomplete="name" aria-required="true" placeholder="John Doe" />
                <label for="full-name">Full Name</label>
                <ValidationMessage For="() => Input.FullName" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputSelect @bind-Value="Input.SelectedOrganizationId" class="form-select" aria-required="true">
                    <option value="0">-- Select Existing Organization --</option>
                    @foreach (var org in Organizations)
                    {
                        <option value="@org.Id">@org.Name</option>
                    }
                </InputSelect>
                <label for="organization-id">Organization</label>
                <ValidationMessage For="() => Input.SelectedOrganizationId" class="text-danger" />
                @if (Organizations.Count == 0)
                {
                    <div class="text-danger mt-2">No organizations found. Please contact an administrator.</div>
                }
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                <label for="email">Email</label>
                <ValidationMessage For="() => Input.Email" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>

            <div class="form-floating mb-3">
                <InputSelect @bind-Value="Input.Role" class="form-select" aria-required="true">
                    <option value="Employee">Employee</option>
                    <option value="Manager">Manager</option>
                </InputSelect>
                <label for="role">Register As</label>
                <ValidationMessage For="() => Input.Role" class="text-danger" />
            </div>

            @if (Input.Role == "Employee")
            {
                <div class="alert alert-info" role="alert">
                    <i class="bi bi-info-circle"></i> Employee accounts require manager approval before you can sign in.
                </div>
            }

            <button type="submit" class="w-100 btn btn-lg btn-primary" disabled="@(Organizations.Count == 0)">Register</button>
        </EditForm>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to register.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    //  Property to hold the list of organizations for the dropdown
    private List<Organization> Organizations { get; set; } = new List<Organization>();

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    //  Fetch organizations on component initialization
    protected override async Task OnInitializedAsync()
    {
        Organizations = await Context.Organizations.OrderBy(o => o.Name).ToListAsync();
    }

    public async Task RegisterUser(EditContext editContext)
    {
        //  Validate and Parse Organization ID
        if (!int.TryParse(Input.SelectedOrganizationId, out int orgId) || orgId <= 0)
        {
            identityErrors = new[] { new IdentityError { Description = "Please select a valid organization." } };
            return;
        }

        //  Create ApplicationUser
        var user = CreateUser();

        //   Assign the selected Organization ID to the user
        user.OrganizationId = orgId;

        // Set full name, role, and registration date
        user.FullName = Input.FullName;
        user.UserRole = Input.Role;
        user.RegistrationDate = DateTime.UtcNow;

        // Managers are auto-approved, employees need approval
        if (Input.Role == "Manager")
        {
            user.IsApproved = true;
            user.ApprovedDate = DateTime.UtcNow;
        }
        else
        {
            user.IsApproved = false;
        }

        //  Set username
        await UserStore.SetUserNameAsync(user, Input.FullName, CancellationToken.None);

        //  Still store their email separately
        var emailStore = GetEmailStore();
        await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);

        //  Create user in Identity
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }

        Logger.LogInformation("User created a new account with password. Role: {Role}, Organization ID: {OrganizationId}", Input.Role, user.OrganizationId);

        //  Add to role
        await UserManager.AddToRoleAsync(user, Input.Role);

        //  Email confirmation setup (same as before)
        var userId = await UserManager.GetUserIdAsync(user);
        var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        var callbackUrl = NavigationManager.GetUriWithQueryParameters(
            NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        // ✅ Handle post-registration flow
        if (Input.Role == "Manager")
        {
            if (UserManager.Options.SignIn.RequireConfirmedAccount)
            {
                RedirectManager.RedirectTo(
                    "Account/RegisterConfirmation",
                    new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
            }

            await SignInManager.SignInAsync(user, isPersistent: false);
            RedirectManager.RedirectTo(ReturnUrl);
        }
        else
        {
            RedirectManager.RedirectTo(
                "Account/RegistrationPending",
                new() { ["email"] = Input.Email });
        }
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private IUserEmailStore<ApplicationUser> GetEmailStore()
    {
        if (!UserManager.SupportsUserEmail)
        {
            throw new NotSupportedException("The default UI requires a user store with email support.");
        }
        return (IUserEmailStore<ApplicationUser>)UserStore;
    }

    private sealed class InputModel
    {
        [Required]
        [Display(Name = "Full Name")]
        public string FullName { get; set; } = "";

        // Added Field for the selected Organization ID (bound as a string from InputSelect)
        [Required]
        [Range(1, int.MaxValue, ErrorMessage = "Please select an existing organization.")]
        [Display(Name = "Organization")]
        public string SelectedOrganizationId { get; set; } = "0";


        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        [Display(Name = "Role")]
        public string Role { get; set; } = "Employee";
    }
}