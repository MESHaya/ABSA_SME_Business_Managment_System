@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using TestAbsa.Data


@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject NavigationManager NavigationManager

<PageTitle>Profile</PageTitle>

<h3>Profile</h3>
<StatusMessage />



<div class="mb-3">
    @if (isManager)
    {
        <NavLink class="btn btn-outline-secondary" href="/manager/dashboard">
            <span class="bi bi-arrow-left"></span> Back to Dashboard
        </NavLink>
    }
    else if (isEmployee)
    {
        <NavLink class="btn btn-outline-secondary" href="/employee/dashboard">
            <span class="bi bi-arrow-left"></span> Back to Dashboard
        </NavLink>
    }
    else
    {
        <NavLink class="btn btn-outline-secondary" href="/">
            <span class="bi bi-arrow-left"></span> Back to Home
        </NavLink>
    }
</div>


<h3>Profile</h3>
<div class="row">
    <div class="col-md-6">
        <EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert" />

            <div class="form-floating mb-3">
                <input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
                <label for="username" class="form-label">Username</label>
            </div>

            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
                <label for="phone-number" class="form-label">Phone number</label>
                <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
            </div>

            <button type="submit" class="w-100 btn btn-lg btn-primary mb-3">Save</button>

            @if (isEmployee)
            {
                <div class="d-flex justify-content-between">
                    <NavLink class="btn btn-outline-secondary w-50 me-2" href="/employee/hr/timesheets">
                        🕒 Timesheets
                    </NavLink>
                    <NavLink class="btn btn-outline-success w-50" href="/employee/hr/leave-requests">
                        📝 Leave Requests
                    </NavLink>
                </div>
            }
        </EditForm>
    </div>
</div>

@code {
    private ApplicationUser user = default!;
    private string? username;
    private string? phoneNumber;
    private bool isEmployee = false;
    private bool isManager = false;
     

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        user = await UserAccessor.GetRequiredUserAsync(HttpContext);
        username = await UserManager.GetUserNameAsync(user);
        phoneNumber = await UserManager.GetPhoneNumberAsync(user);

        Input.PhoneNumber ??= phoneNumber;
           isEmployee = await UserManager.IsInRoleAsync(user, "Employee");
           isManager = await UserManager.IsInRoleAsync(user, "Manager");
    }

    private async Task OnValidSubmitAsync()
    {
        if (Input.PhoneNumber != phoneNumber)
        {
            var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
            if (!setPhoneResult.Succeeded)
            {
                RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
                return;
            }
        }

        await SignInManager.RefreshSignInAsync(user);
        RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
    }

 private async Task NavigateToDashboard()
{
    var isManager = await UserManager.IsInRoleAsync(user, "Manager");
    
    if (isManager)
    {
        NavigationManager.NavigateTo("/manager/dashboard");
    }
    else if (isEmployee)
    {
        NavigationManager.NavigateTo("/employee/dashboard");
    }
    else
    {
        NavigationManager.NavigateTo("/");
    }
}

    private sealed class InputModel
    {
        [Phone]
        [Display(Name = "Phone number")]
        public string? PhoneNumber { get; set; }
    }
}
