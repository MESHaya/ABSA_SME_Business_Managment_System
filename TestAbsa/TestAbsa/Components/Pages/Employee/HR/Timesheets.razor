@page "/employee/hr/timesheets"
@layout TestAbsa.Components.Layout.MainLayout
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using TestAbsa.Data
@using TestAbsa.Data.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Components.Authorization
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider

<!-- Timesheet Entry Section -->
<div class="card shadow-sm mb-4">
    <div class="card-header bg-primary text-white">
        <h5 class="mb-0">
            <i class="bi bi-clock-history"></i> Timesheet Entry
        </h5>
    </div>
    <div class="card-body">
        @if (!string.IsNullOrEmpty(timesheetMessage))
        {
            <div class="alert @(timesheetMessage.StartsWith("Error") ? "alert-danger" : "alert-success") alert-dismissible fade show" role="alert">
                @timesheetMessage
                <button type="button" class="btn-close" @onclick="() => timesheetMessage = null"></button>
            </div>
        }

        <EditForm Model="@timesheetEntry" OnValidSubmit="@SubmitTimesheet">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />

            <div class="row g-3">
                <div class="col-md-6">
                    <label class="form-label">Date</label>
                    <InputDate @bind-Value="timesheetEntry.WorkDate" class="form-control" max="@DateTime.Today.ToString("yyyy-MM-dd")" />
                    <ValidationMessage For="@(() => timesheetEntry.WorkDate)" />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Hours Worked</label>
                    <InputNumber @bind-Value="timesheetEntry.HoursWorked" class="form-control" step="0.5" min="0.5" max="24" />
                    <ValidationMessage For="@(() => timesheetEntry.HoursWorked)" />
                    <small class="text-muted">Enter hours in 0.5 increments (e.g., 8.5 for 8 hours 30 minutes)</small>
                </div>

                <div class="col-md-6">
                    <label class="form-label">Project/Task Name</label>
                    <InputText @bind-Value="timesheetEntry.ProjectName" class="form-control" placeholder="Enter project or task name" />
                    <ValidationMessage For="@(() => timesheetEntry.ProjectName)" />
                </div>

                <div class="col-md-6">
                    <label class="form-label">Task Type</label>
                    <InputSelect @bind-Value="timesheetEntry.TaskType" class="form-select">
                        <option value="">-- Select Task Type --</option>
                        <option value="Development">Development</option>
                        <option value="Meeting">Meeting</option>
                        <option value="Testing">Testing</option>
                        <option value="Documentation">Documentation</option>
                        <option value="Support">Support</option>
                        <option value="Training">Training</option>
                        <option value="Other">Other</option>
                    </InputSelect>
                    <ValidationMessage For="@(() => timesheetEntry.TaskType)" />
                </div>

                <div class="col-12">
                    <label class="form-label">Description</label>
                    <InputTextArea @bind-Value="timesheetEntry.Description" class="form-control" rows="3" placeholder="Brief description of work completed..." />
                    <ValidationMessage For="@(() => timesheetEntry.Description)" />
                </div>

                <div class="col-12">
                    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        <i class="bi bi-check-circle"></i> Submit Timesheet
                    </button>
                    <button type="button" class="btn btn-secondary ms-2" @onclick="ResetForm">
                        <i class="bi bi-arrow-counterclockwise"></i> Reset
                    </button>
                </div>
            </div>
        </EditForm>
    </div>
</div>

<!-- Recent Timesheets -->
<div class="card shadow-sm mb-4">
    <div class="card-header bg-light">
        <h5 class="mb-0">
            <i class="bi bi-list-ul"></i> Recent Timesheets
        </h5>
    </div>
    <div class="card-body">
        @if (isLoadingTimesheets)
        {
            <div class="text-center text-muted py-3">
                <span class="spinner-border spinner-border-sm me-2"></span>
                Loading timesheets...
            </div>
        }
        else if (recentTimesheets.Any())
        {
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead>
                        <tr>
                            <th>Date</th>
                            <th>Project/Task</th>
                            <th>Type</th>
                            <th>Hours</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var entry in recentTimesheets)
                        {
                            <tr>
                                <td>@entry.WorkDate.ToString("yyyy-MM-dd")</td>
                                <td>
                                    <strong>@entry.ProjectName</strong>
                                    @if (!string.IsNullOrEmpty(entry.Description))
                                    {
                                        <br />
                                        <small class="text-muted">@entry.Description</small>
                                    }
                                </td>
                                <td><span class="badge bg-info">@entry.TaskType</span></td>
                                <td>@entry.HoursWorked.ToString("0.0") hrs</td>
                                <td>
                                    <span class="badge @(entry.IsApproved ? "bg-success" : "bg-warning")">
                                        @(entry.IsApproved ? "Approved" : "Pending")
                                    </span>
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="text-muted text-center py-3">
                No timesheets recorded yet.
            </div>
        }
    </div>
</div>

@code {
    private List<TimesheetEntry> recentTimesheets = new();
    private TimesheetEntry timesheetEntry = new();
    private bool isLoadingTimesheets = false;
    private bool isSubmitting = false;
    private string? timesheetMessage;
    private string? currentUserId;
    private int? currentOrganizationId;


    protected override async Task OnInitializedAsync()
    {
        // ✅ FIX: Load user first, THEN load timesheets sequentially
        await LoadCurrentUser();
        
        // Only load timesheets after we have the user ID
        if (!string.IsNullOrEmpty(currentUserId))
        {
            await LoadRecentTimesheets();
        }
    }

    private async Task LoadCurrentUser()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = await UserManager.GetUserAsync(authState.User);
            currentUserId = user?.Id;
            currentOrganizationId = user?.OrganizationId; // ✅ Capture org ID

            timesheetEntry = new TimesheetEntry
                {
                    EmployeeId = currentUserId ?? string.Empty,
                    WorkDate = DateTime.Today,
                    HoursWorked = 8.0m
                };
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user: {ex.Message}");
        }
    }


    private async Task LoadRecentTimesheets()
    {
        if (string.IsNullOrEmpty(currentUserId)) return;

        try
        {
            isLoadingTimesheets = true;
            
            // ✅ Create a fresh context for this operation
            using var context = await DbContextFactory.CreateDbContextAsync();

            recentTimesheets = await context.TimesheetEntries
                .Where(t => t.EmployeeId == currentUserId)
                .OrderByDescending(t => t.WorkDate)
                .ThenByDescending(t => t.CreatedDate)
                .Take(10)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading timesheets: {ex.Message}");
            recentTimesheets = new List<TimesheetEntry>();
        }
        finally
        {
            isLoadingTimesheets = false;
        }
    }

    private async Task SubmitTimesheet()
    {
        Console.WriteLine("SubmitTimesheet called!");
        
        if (string.IsNullOrEmpty(currentUserId))
        {
            timesheetMessage = "Error: User not authenticated.";
            return;
        }

        isSubmitting = true;
        timesheetMessage = null;

        try
        {
            // ✅ Fresh context for submission
            using var context = await DbContextFactory.CreateDbContextAsync();

            if (!currentOrganizationId.HasValue)
            {
                timesheetMessage = "Error: Your account is not linked to any organization.";
                return;
            }

            var newEntry = new TimesheetEntry
                {
                    EmployeeId = currentUserId,
                    WorkDate = timesheetEntry.WorkDate,
                    HoursWorked = timesheetEntry.HoursWorked,
                    ProjectName = timesheetEntry.ProjectName,
                    TaskType = timesheetEntry.TaskType,
                    Description = timesheetEntry.Description,
                    CreatedDate = DateTime.UtcNow,
                    IsApproved = false,
                    OrganizationId = currentOrganizationId.Value // ✅ Fixes CS0266 error
                };


            context.TimesheetEntries.Add(newEntry);
            await context.SaveChangesAsync();

            timesheetMessage = "Timesheet submitted successfully!";
            
            // Reload timesheets after successful submission
            await LoadRecentTimesheets();
            ResetForm();
        }
        catch (Exception ex)
        {
            timesheetMessage = $"Error: {ex.Message}";
            Console.WriteLine($"Error submitting timesheet: {ex}");

            if (ex.InnerException != null)
            {
                Console.WriteLine($"Inner Exception: {ex.InnerException.Message}");
                Console.WriteLine($"Inner Exception Stack: {ex.InnerException.StackTrace}");
            }
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void ResetForm()
    {
        timesheetEntry = new TimesheetEntry
        {
            EmployeeId = currentUserId ?? string.Empty,
            WorkDate = DateTime.Today,
            HoursWorked = 8.0m
        };
    }
}