@page "/employee/inventory/dashboard"
@rendermode InteractiveServer
@using TestAbsa.Data.Models
@using TestAbsa.Services
@inject TestAbsa.Services.IInventoryService InventoryService
@inject NavigationManager NavigationManager

<PageTitle>Inventory Dashboard</PageTitle>

<div class="container mt-5">
    <div class="d-flex flex-wrap justify-content-between align-items-center mb-4">
        <h3 class="text-primary mb-2 mb-md-0">Current Product Inventory</h3>

        <div class="btn-group" role="group" aria-label="Inventory actions">
            <a href="/employee/inventory/add-product" class="btn btn-primary d-flex align-items-center shadow-sm">
                <i class="oi oi-plus me-2"></i>
                <span>Add Product</span>
            </a>

            <a href="/employee/inventory/request-stock" class="btn btn-secondary d-flex align-items-center shadow-sm">
                <i class="oi oi-box me-2"></i>
                <span>Request Stock</span>
            </a>

            <a href="/employee/stock-requests" class="btn btn-outline-primary d-flex align-items-center shadow-sm">
                <i class="oi oi-eye me-2"></i>
                <span>View Requests</span>
            </a>
        </div>
    </div>


    @if (IsLoading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (Products.Count == 0)
    {
        <div class="alert alert-warning">
            <p class="mb-0">No products found in the inventory. Click "Add New Product" to get started.</p>
        </div>
    }
    else
    {
        <div class="table-responsive shadow-sm rounded">
            <table class="table table-hover table-bordered mb-0">
                <thead class="table-dark">
                    <tr>
                        <th>Product Name</th>
                        <th>SKU</th>
                        <th class="text-center">Current Stock</th>
                        <th class="text-center">Min Level</th>
                        <th>Supplier</th>
                        <th class="text-center">Status</th>
                        <th class="text-center">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var product in Products)
                    {
                        var isLowStock = product.CurrentStock <= product.MinLevel;
                        var rowClass = isLowStock ? "table-danger fw-bold" : "";

                        <tr class="@rowClass">
                            <td>@product.ItemName</td>
                            <td>@product.SKU</td>
                            <td class="text-center">
                                @product.CurrentStock
                            </td>
                            <td class="text-center">@product.MinLevel</td>
                            <td>@(product.Supplier?.Name ?? "N/A")</td>
                            <td class="text-center">
                                @if (isLowStock)
                                {
                                    <span class="badge bg-danger">LOW STOCK</span>
                                }
                                else
                                {
                                    <span class="badge bg-success">OK</span>
                                }
                            </td>
                            <td class="text-center">
                                <button class="btn btn-sm btn-warning" @onclick="() => EditProduct(product.Id)">
                                    <i class="oi oi-pencil me-1"></i>Edit
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <p class="text-muted mt-3">Total distinct products: @Products.Count</p>
    }
</div>

@code {
    private List<Product> Products { get; set; } = new List<Product>();
    private bool IsLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Products = await InventoryService.GetAllProductsAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading products: {ex.Message}");
            Products = new List<Product>();
        }
        finally
        {
            IsLoading = false;
        }
    }

    private void EditProduct(int productId)
    {
        NavigationManager.NavigateTo($"/employee/inventory/edit-product/{productId}");
    }
}