@page "/employee/inventory/request-stock"
@inject IInventoryService InventoryService
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

@using TestAbsa.Data.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Forms

<PageTitle>Request Stock</PageTitle>
<NavLink class="btn btn-primary mt-3" href="/employee/inventory/dashboard">
                ← 
            </NavLink>

<div class="card shadow-lg p-4 mx-auto my-5" style="max-width: 600px; border-radius: 0.75rem;">
    <h3 class="card-title text-primary mb-4 text-center fw-bold">Submit Stock Request</h3>
    <p class="text-muted text-center mb-4">Select the product and quantity required for your operational needs.</p>

    @if (isLoading)
    {
        <div class="text-center p-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading products...</span>
            </div>
            <p class="mt-2">Loading products...</p>
        </div>
    }
    else if (ProductList == null || !ProductList.Any())
    {
        <div class="alert alert-warning text-center">
            <h5 class="alert-heading">No Products Found!</h5>
            <p>Please ensure products have been added to the inventory first.</p>
            <a href="/manager/inventory/add-product" class="alert-link">Go to Add Product Page</a>
        </div>
    }
    else
    {
        <EditForm method="post" Model="@RequestModel" OnValidSubmit="HandleValidSubmit" FormName="StockRequestForm" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary />

            @* Hidden fields for user info *@
            <InputText @bind-Value="RequestModel.EmployeeId" type="hidden" />
            <InputText @bind-Value="RequestModel.EmployeeName" type="hidden" />

            @* --- Product Selection --- *@
            <div class="mb-3">
                <label for="product" class="form-label fw-semibold">Product Item</label>
                <InputSelect @bind-Value="RequestModel.ProductId" class="form-select" id="product">
                    <option value="0">-- Select a Product --</option>
                    @if (ProductList != null)
                    {
                        @foreach (var product in ProductList)
                        {
                            <option value="@product.Id">@product.ItemName (@product.SKU)</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => RequestModel.ProductId)" />
            </div>

            @* --- Quantity --- *@
            <div class="mb-3">
                <label for="quantity" class="form-label fw-semibold">Quantity Required</label>
                <InputNumber @bind-Value="RequestModel.Quantity" class="form-control" id="quantity" />
                <ValidationMessage For="@(() => RequestModel.Quantity)" />
            </div>

            @* --- Notes --- *@
            <div class="mb-4">
                <label for="notes" class="form-label fw-semibold">Notes (Reason for Request)</label>
                <InputTextArea @bind-Value="RequestModel.Notes" class="form-control" id="notes" rows="3" />
                <ValidationMessage For="@(() => RequestModel.Notes)" />
            </div>

            <div class="d-grid gap-2 mt-4">
                <button type="submit" class="btn btn-primary btn-lg">
                    Submit Request
                </button>
            </div>
        </EditForm>
    }

    @if (!string.IsNullOrEmpty(submissionMessage))
    {
        <div class="alert @(isSuccess ? "alert-success" : "alert-danger") mt-4" role="alert">
            @submissionMessage
        </div>
    }
</div>

@code {
    [SupplyParameterFromForm]
    private StockRequest? RequestModel { get; set; }

    private List<Product>? ProductList;
    private string submissionMessage = string.Empty;
    private bool isSuccess = false;
    private bool isLoading = true;

    private string currentUserId = string.Empty;
    private string currentUserName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            currentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "Unknown ID";
            currentUserName = user.Identity.Name ?? "Unknown User";
        }
        else
        {
            submissionMessage = "Authentication failed. Please log in to submit a request.";
            isSuccess = false;
        }

        // Initialize RequestModel if it's null (first load)
        RequestModel ??= new StockRequest
        {
            EmployeeId = currentUserId,
            EmployeeName = currentUserName
        };

        try
        {
            ProductList = await InventoryService.GetAllProductsAsync();
        }
        catch (Exception ex)
        {
            submissionMessage = $"Error loading products: {ex.Message}";
            isSuccess = false;
        }

        isLoading = false;
    }

    private async Task HandleValidSubmit()
    {
        if (RequestModel == null) return;

        submissionMessage = string.Empty;
        isSuccess = false;

        if (RequestModel.ProductId == 0)
        {
            submissionMessage = "Please select a valid product before submitting.";
            isSuccess = false;
            return;
        }

        if (RequestModel.Quantity < 1)
        {
            submissionMessage = "Please enter a valid quantity (at least 1).";
            isSuccess = false;
            return;
        }

        try
        {
            RequestModel.EmployeeId = currentUserId;
            RequestModel.EmployeeName = currentUserName;
            RequestModel.Status = "Pending";

            await InventoryService.AddStockRequestAsync(RequestModel);

            isSuccess = true;
            submissionMessage = "Stock request submitted successfully! A manager will review it shortly.";

            // Reset for next entry
            RequestModel = new StockRequest
            {
                EmployeeId = currentUserId,
                EmployeeName = currentUserName
            };
        }
        catch (Exception ex)
        {
            isSuccess = false;
            submissionMessage = $"An error occurred: {ex.Message}";
        }
    }
}