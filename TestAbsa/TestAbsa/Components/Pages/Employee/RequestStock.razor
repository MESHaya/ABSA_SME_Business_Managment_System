@page "/employee/request-stock"
@rendermode InteractiveServer
@using System.Security.Claims
@using TestAbsa.Data.Models
@using TestAbsa.Services
@inject IInventoryService InventoryService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<PageTitle>Request Stock</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-lg-8 col-md-10">
            <h3 class="mb-4 text-secondary">Submit Stock Request</h3>

            @if (IsLoading)
            {
                <div class="text-center p-5">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                    <p class="mt-2 text-muted">Loading available products...</p>
                </div>
            }
            else if (AvailableProducts.Count == 0)
            {
                <div class="alert alert-warning">
                    <p class="mb-0">No products are currently available in the inventory to request.</p>
                </div>
            }
            else
            {
                <EditForm Model="@NewRequest" OnValidSubmit="@HandleSubmit" FormName="RequestStock">
                    <DataAnnotationsValidator />
                    <div class="card p-4 shadow-sm">

                        <div class="mb-3">
                            <label for="Product" class="form-label">Product to Request</label>
                            <InputSelect id="Product" class="form-select" @bind-Value="NewRequest.ProductId">
                                <option value="">-- Select Product --</option>
                                @foreach (var product in AvailableProducts)
                                {
                                    <option value="@product.Id">@product.ItemName (@product.SKU) - Stock: @product.CurrentStock</option>
                                }
                            </InputSelect>
                            <ValidationMessage For="@(() => NewRequest.ProductId)" />
                        </div>

                        <div class="mb-3">
                            <label for="Quantity" class="form-label">Quantity Required</label>
                            <InputNumber id="Quantity" class="form-control" @bind-Value="NewRequest.Quantity" />
                            <ValidationMessage For="@(() => NewRequest.Quantity)" />
                        </div>

                        <div class="mb-3">
                            <label for="Notes" class="form-label">Justification/Notes (Optional)</label>
                            <InputTextArea id="Notes" class="form-control" @bind-Value="NewRequest.Notes" rows="3" />
                        </div>

                        <button type="submit" class="btn btn-primary mt-3">Submit Request</button>

                        @if (!string.IsNullOrEmpty(Message))
                        {
                            <div class="mt-3 alert @(IsSuccess ? "alert-success" : "alert-danger")">@Message</div>
                        }
                    </div>
                </EditForm>
            }
        </div>
    </div>
</div>

@code {
    private StockRequest NewRequest { get; set; } = new StockRequest();
    private List<Product> AvailableProducts { get; set; } = new List<Product>();
    private bool IsLoading = true;

    private string Message = string.Empty;
    private bool IsSuccess = false;

    // User details needed for the StockRequest model
    private string? CurrentUserId;
    private string? CurrentUserName;

    protected override async Task OnInitializedAsync()
    {
        // 1. Get user identity details
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        CurrentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        CurrentUserName = user.FindFirst(ClaimTypes.Name)?.Value ?? "Employee";

        if (string.IsNullOrEmpty(CurrentUserId))
        {
            Message = "Error: Could not determine your user identity. Please ensure you are logged in correctly.";
            IsSuccess = false;
            IsLoading = false;
            return;
        }

        // 2. Load products for the dropdown
        try
        {
            // Fetch products without supplier data, as it's not needed here
            AvailableProducts = await InventoryService.GetAllProductsAsync(includeSuppliers: false);
        }
        catch (Exception ex)
        {
            Message = $"An error occurred while loading products: {ex.Message}";
            IsSuccess = false;
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task HandleSubmit()
    {
        Message = string.Empty; // Clear previous message
        IsSuccess = false;

        if (string.IsNullOrEmpty(CurrentUserId) || string.IsNullOrEmpty(CurrentUserName))
        {
            Message = "Submission failed: User details are missing.";
            return;
        }

        try
        {
            // Set the automatically captured employee details
            NewRequest.EmployeeId = CurrentUserId;
            NewRequest.EmployeeName = CurrentUserName;

            // --- Calling AddStockRequestAsync (the correct method name) ---
            await InventoryService.AddStockRequestAsync(NewRequest);

            // Success feedback
            Message = $"Request successfully submitted for Manager review! Product ID: {NewRequest.ProductId}.";
            IsSuccess = true;

            // Reset form for next submission
            NewRequest = new StockRequest();
        }
        catch (Exception ex)
        {
            Message = $"An error occurred during submission: {ex.Message}";
            IsSuccess = false;
        }
    }
}
