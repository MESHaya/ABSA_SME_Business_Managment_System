@page "/request-stock"
@inject IInventoryService InventoryService
@inject Microsoft.AspNetCore.Components.Authorization.AuthenticationStateProvider AuthenticationStateProvider
@inject Microsoft.AspNetCore.Components.NavigationManager NavigationManager

@using TestAbsa.Data.Models
@using System.Security.Claims

<PageTitle>Request Stock</PageTitle>

<div class="card shadow-lg p-4 mx-auto my-5" style="max-width: 600px; border-radius: 0.75rem;">
    <h3 class="card-title text-primary mb-4 text-center fw-bold">Submit Stock Request</h3>
    <p class="text-muted text-center mb-4">Select the product and quantity required for your operational needs.</p>

    @if (ProductList == null)
    {
        <div class="text-center p-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading products...</span>
            </div>
            <p class="mt-2">Loading products...</p>
        </div>
    }
    else if (!ProductList.Any())
    {
        <div class="alert alert-warning text-center">
            <h5 class="alert-heading">No Products Found!</h5>
            <p>Please ensure products have been added to the inventory first.</p>
            <a href="/manager/inventory/add-product" class="alert-link">Go to Add Product Page</a>
        </div>
    }
    else
    {
        <EditForm Model="@RequestModel" OnValidSubmit="HandleValidSubmit" FormName="StockRequestForm">
            <DataAnnotationsValidator />

            @* --- Product Selection --- *@
            <div class="mb-3">
                <label for="product" class="form-label fw-semibold">Product Item</label>
                <InputSelect @bind-Value="RequestModel.ProductId" class="form-select" id="product">
                    <option value="">-- Select a Product --</option>
                    @foreach (var product in ProductList)
                    {
                        <option value="@product.Id">@product.ItemName (@product.SKU)</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => RequestModel.ProductId)" />
            </div>

            @* --- Quantity --- *@
            <div class="mb-3">
                <label for="quantity" class="form-label fw-semibold">Quantity Required</label>
                <InputNumber @bind-Value="RequestModel.Quantity" class="form-control" id="quantity" />
                <ValidationMessage For="@(() => RequestModel.Quantity)" />
            </div>

            @* --- Notes --- *@
            <div class="mb-4">
                <label for="notes" class="form-label fw-semibold">Notes (Reason for Request)</label>
                <InputTextArea @bind-Value="RequestModel.Notes" class="form-control" id="notes" rows="3" />
                <ValidationMessage For="@(() => RequestModel.Notes)" />
            </div>

            <div class="d-grid gap-2 mt-4">
                <button type="submit" class="btn btn-primary btn-lg" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true">Submitting...</span>

                    }
                    else
                    {
                        <span>Submit Request</span>
                    }
                </button>
            </div>
        </EditForm>
    }

    @if (!string.IsNullOrEmpty(submissionMessage))
    {
        <div class="alert @(isSuccess ? "alert-success" : "alert-danger") mt-4" role="alert">
            @submissionMessage
        </div>
    }
</div>

@code {
    private StockRequest RequestModel = new StockRequest();
    private List<Product>? ProductList;
    private bool isSubmitting = false;
    private string submissionMessage = string.Empty;
    private bool isSuccess = false;

    // Variables to store authenticated user details
    private string currentUserId = string.Empty;
    private string currentUserName = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        // 1. Get the authenticated user's details
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            // Identity ID
            currentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value ?? "Unknown ID";
            // The logged-in username/email
            currentUserName = user.Identity.Name ?? "Unknown User";

            // Set these details directly on the model for submission
            RequestModel.EmployeeId = currentUserId;
            RequestModel.EmployeeName = currentUserName;

            // 2. Load available products for the dropdown
            try
            {
                ProductList = await InventoryService.GetAllProductsAsync();
            }
            catch (Exception ex)
            {
                submissionMessage = $"Error loading products: {ex.Message}";
            }
        }
        else
        {
            submissionMessage = "Authentication failed. Please log in to submit a request.";
        }
    }

    private async Task HandleValidSubmit()
    {
        isSubmitting = true;
        submissionMessage = string.Empty;
        isSuccess = false;

        try
        {
            // Ensure necessary fields are populated before submission
            if (string.IsNullOrEmpty(RequestModel.EmployeeId))
            {
                submissionMessage = "Error: User identity could not be retrieved. Please try logging out and back in.";
                return;
            }

            // Status is set to Pending when the request is created in the service/model, but explicitly set here for clarity
            RequestModel.Status = "Pending";

            // Call the service method
            await InventoryService.AddStockRequestAsync(RequestModel);

            isSuccess = true;
            submissionMessage = "Stock request submitted successfully! A manager will review it shortly.";

            // Reset the form for a new entry, retaining user details
            RequestModel = new StockRequest
                {
                    EmployeeId = currentUserId,
                    EmployeeName = currentUserName
                };
        }
        catch (Exception ex)
        {
            isSuccess = false;
            submissionMessage = $"An error occurred during submission: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }
}
