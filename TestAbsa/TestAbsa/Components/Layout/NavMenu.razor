@namespace TestAbsa.Components.Layout
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IDbContextFactory<ApplicationDbContext> DbContextFactory
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using System.Security.Claims
@using TestAbsa.Data
@implements IDisposable


<AuthorizeView>
    <Authorized Context="context">
        <div class="page-title">@PageName</div>

        <nav class="nav-links">
            @if (isManager)
            {
                <!-- Manager Navigation -->
                <a href="/manager/dashboard" class="nav-link">
                    <span class="bi bi-house-door-fill"></span> Dashboard
                </a>
                <a href="/manager/inventory/dashboard" class="nav-link">
                    <span class="bi bi-box-seam"></span> Inventory
                </a>
            

                <a href="/manager/hr/dashboard" class="nav-link">
                    <span class="bi bi-currency-dollar"></span> HR
                </a>

                <a href="/manager/finance/dashboard" class="nav-link">
                    <span class="bi bi-currency-dollar"></span> Finance
                </a>
                <a href="/settings" class="nav-link">
                    <span class="bi bi-gear-fill"></span> Settings
                </a>
                
             <form action="Account/Logout" method="post" style="display: inline; margin: 0;">
    <AntiforgeryToken />
    <button type="submit" 
            class="nav-link btn btn-danger text-white" 
            style="border: none; cursor: pointer; padding: 0.5rem 1rem; border-radius: 6px;">
        <span class="bi bi-box-arrow-right"></span> Logout
    </button>
</form>

            }
            else if (isEmployee)
            {
                <!-- Employee Navigation -->
                <a href="/employee/dashboard" class="nav-link">
                    <span class="bi bi-house-door-fill"></span> Dashboard
                </a>
                <a href="/employee/inventory/dashboard" class="nav-link">
                    <span class="bi bi-box-seam"></span> Inventory
                </a>
                <a href="/employee/finance/dashboard" class="nav-link">
                    <span class="bi bi-currency-dollar"></span> Finance
                </a>
                <a href="/settings" class="nav-link">
                    <span class="bi bi-gear-fill"></span> Settings
                </a>
                
            <form action="Account/Logout" method="post" style="display: inline; margin: 0;">
    <AntiforgeryToken />
    <input type="hidden" name="ReturnUrl" value="/" />
    <button type="submit" 
            class="nav-link btn btn-danger text-white" 
            style="border: none; cursor: pointer; padding: 0.5rem 1rem; border-radius: 6px;">
        <span class="bi bi-box-arrow-right"></span> Logout
    </button>
</form>

            }
        </nav>

        

<div class="user-menu">
    <a href="/Account/Manage" class="profile-avatar d-flex align-items-center text-decoration-none">
        <span class="username">@context.User.Identity?.Name</span>
        @if (isManager)
        {
            <span class="badge bg-primary ms-2" style="font-size: 0.7rem;">Manager</span>
        }
        else if (isEmployee)
        {
            <span class="badge bg-secondary ms-2" style="font-size: 0.7rem;">Employee</span>
        }
    </a>
</div>

    </Authorized>

    <NotAuthorized>
        <div class="page-title">Welcome</div>
        <nav class="nav-links">
            <a href="/" class="nav-link">Home</a>
            <a href="/Account/Login" class="nav-link">
                <span class="bi bi-person-badge"></span> Login
            </a>
            <a href="/Account/Register" class="nav-link">
                <span class="bi bi-person"></span> Register
            </a>
        </nav>
    </NotAuthorized>
</AuthorizeView>


@code {
    private string? currentUrl;
    private string PageName => GetPageName(NavigationManager.Uri);
    private bool isManager = false;
    private bool isEmployee = false;
    private int pendingUserCount = 0;
    private System.Threading.Timer? timer;


    protected override async Task OnInitializedAsync()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;

        await CheckUserRole();

        // Auto-refresh pending count every 30 seconds for managers
        if (isManager)
        {
            timer = new System.Threading.Timer(async _ =>
            {
                await LoadPendingUserCount();
                await InvokeAsync(StateHasChanged);
            }, null, TimeSpan.FromSeconds(30), TimeSpan.FromSeconds(30));
        }
    }

    private async Task CheckUserRole()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            if (user.Identity?.IsAuthenticated == true)
            {
                isManager = user.IsInRole("Manager");
                isEmployee = user.IsInRole("Employee");

                // Load pending user count for managers
                if (isManager)
                {
                    await LoadPendingUserCount();
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error checking user role: {ex.Message}");
        }
    }

    private async Task LoadPendingUserCount()
    {
        try
        {
            using var context = await DbContextFactory.CreateDbContextAsync();
            pendingUserCount = await context.Users
                .CountAsync(u => !u.IsApproved && u.UserRole == "Employee");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading pending user count: {ex.Message}");
            pendingUserCount = 0;
        }
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        await CheckUserRole();
        StateHasChanged();
    }

    private string GetPageName(string uri)
    {
        var segments = new Uri(uri).AbsolutePath.Split('/', StringSplitOptions.RemoveEmptyEntries);
        if (segments.Length == 0) return "Dashboard";

        var lastSegment = segments[^1];

        // Handle special cases
        if (lastSegment == "add-product") return "Add Product";
        if (lastSegment == "request-stock") return "Request Stock";
        if (lastSegment == "employee-management") return "Employee Management";
        if (lastSegment == "pendingusers") return "Pending Users";
        if (lastSegment == "addmanager") return "Add Manager";
        if (lastSegment == "my-requests") return "My Requests";
        if (lastSegment == "inventory") return "Inventory";
        if (lastSegment == "finance") return "Finance";
        if (lastSegment == "settings") return "Settings";

        var words = lastSegment.Split('-', StringSplitOptions.RemoveEmptyEntries)
                               .Select(w => char.ToUpper(w[0]) + w.Substring(1));
        return string.Join(' ', words);
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
        timer?.Dispose();
    }
}